# -*- coding: utf-8 -*-
"""Imersão IA Alura + Google Gemini.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeV9-sHh3L8Yk8GnZDY6My1NvFuRz-fh
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão 
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

# Respira – Chatbot com pausa guiada, lembrete via link do Google Agenda e info de pausas
import urllib.parse
from datetime import datetime, timedelta

# Apresentação do chatbot
def apresentar_chatbot():
    print("=" * 30)
    print(" 🌱 Bem-vindo(a) ao Respira! 🌱")
    print("=" * 30)
    print("\nSeu assistente para pausas conscientes.")
    print("Encontre momentos de equilíbrio para sua mente e corpo.")
    print("(Este app não substitui um profissional de saúde.)\n")

# Obter nome do usuário
def obter_nome_usuario():
    nome = input("Por favor, digite seu nome: ")
    print(f"\nOlá, {nome}! Que bom ter você aqui. 😊")
    return nome

# Menu principal
def exibir_menu_principal():
    print("\n✨ Menu Principal ✨")
    print("-" * 20)
    print("1. 🧘 Iniciar uma pausa guiada")
    print("2. ⏰ Criar lembrete de pausa no Google Agenda")
    print("3. 💡 Saber mais sobre a importância das pausas")
    print("4. 👋 Sair")
    print("-" * 20)
    return input("Escolha uma opção (1–4): ")

# Pausa guiada
def iniciar_pausa_guiada():
    print("\n🧘 Iniciando pausa guiada...")
    input("Feche os olhos e inspire profundamente... (Enter)")
    input("Expire lentamente pela boca... (Enter)")
    input("Sinta seu corpo relaxando... (Enter)")
    print("\n✨ Pausa concluída. Respire sempre que precisar.")

# link pro Google Agenda
def criar_lembrete_agenda():
    print("\n⏰ Gerando link para o Google Agenda...")
    inicio = datetime.now() + timedelta(minutes=1)
    fim    = inicio + timedelta(minutes=5)

    # Formata 
    inicio_str = inicio.strftime("%Y%m%dT%H%M%S")
    fim_str    = fim.strftime("%Y%m%dT%H%M%S")

    titulo     = urllib.parse.quote("🌿 Pausa consciente - Respira")
    descricao  = urllib.parse.quote("Às vezes tudo o que a gente precisa é de um minuto para voltar pro agora.")

    link = (
      f"https://www.google.com/calendar/render?"
      f"action=TEMPLATE&text={titulo}"
      f"&dates={inicio_str}/{fim_str}"
      f"&details={descricao}"
    )
    print("👉 Clique ou copie este link no navegador para criar seu lembrete:\n")
    print(link)

# Exibe informação sobre pausas
def exibir_importancia_pausas():
    print("\n💡 A Importância das Pausas Conscientes 💡")
    print("- Redução do estresse e da ansiedade.")
    print("- Melhora da concentração e do foco.")
    print("- Aumento da produtividade.")
    print("- Prevenção do esgotamento mental e físico.")
    print("- Promoção do bem‑estar emocional.")
    print("\nCuide da sua saúde mental! Procure um profissional 🌱")

# Função principal
def main():
    apresentar_chatbot()
    nome = obter_nome_usuario()

    while True:
        opcao = exibir_menu_principal()

        if opcao == '1':
            iniciar_pausa_guiada()
        elif opcao == '2':
            criar_lembrete_agenda()
        elif opcao == '3':
            exibir_importancia_pausas()
        elif opcao == '4':
            print(f"\n{nome}, até logo! Lembre-se: Às vezes, tudo o que a gente precisa é de um minuto para voltar pro agora. Então RESPIRA! 🌿")
            break
        else:
            print("⚠️ Opção inválida. Digite um número de 1 a 4.")

# Executa
if __name__  == "__main__":
    main()
